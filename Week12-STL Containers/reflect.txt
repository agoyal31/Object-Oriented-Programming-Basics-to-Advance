/*
* Name - Avni Goyal
* Seneca Email - agoyal31@myseneca.ca
* Seneca Student ID - 166795211
* Date of completion - 2023/07/08
*/
//I have done reflection by myself.


1) m_vehicles is a container that can hold vehicle pointers to objects of type Vehicle(Car or Racecar). The std::vector is a dynamic array that automatically 
adjusts its size as elements are added or removed. By using 'std::vector <Vehicle*> m_vehicles', it is specified that the vector will store pointers to Vehicle 
objects, rather than storing the objects of Vehicle(Car or Racecar) itself. This showcase polymorphic behavior, where different types of vehicles(in our case 
Caror Racecar) can be stored in the vector, as long as they are derived from the Vehicle base class. As, pointers are being stored in a vector m_vehicles,
which points to a object(either Car or Racecar)it's users responsibility to manage the memory of the objects(Car or Racecar) being pointed to. In this case, 
the destructor is used to deallocate the memory for the Vehicle objects created with new. To prevent any memory leaks by the memory allocated with 'new' 
keyword for Car or Racecar while the vector is deleted we have to delete the dynamically allocated memory.

2) loadData() function contains try and catch block that is responsible for detecting the errors depending upon the condition while reading records from the file
and display accordingly onto console. Catch block is responsible for displaying an error of type string as per the throw from the specific condition while reading 
file. Another alternative solution could be using error codes or a combination of error codes and exceptions. Instead of throwing exceptions, we can have the 
createInstance() function that returns an error code indicating the specific error scenario. For example, we can use an enumeration to define different error 
codes, and createInstance() can return the appropriate error code. We can write code as following:
enum class CreateInstanceError {
    None,
    InvalidData,
    UnknownType
};

CreateInstanceError sdds::createInstance(std::istream& is, sdds::Vehicle*& vehicle)
{
    // ... existing code ...

    if (invalidData)
    {
        return CreateInstanceError::InvalidData;
    }
    else if (unknownType)
    {
        return CreateInstanceError::UnknownType;
    }

    // ... existing code ...
}

Then, in the loadData() function, we can check the error codes and handle each case separately:

void loadData(const char* filename, sdds::Autoshop& as)
{
    std::ifstream file(filename);
    if (!file)
    {
        std::cerr << "ERROR: Cannot open file [" << filename << "].\n";
        return;
    }

    while (file)
    {
        sdds::Vehicle* aVehicle = nullptr;
        CreateInstanceError error = sdds::createInstance(file, aVehicle);
        switch (error)
        {
            case CreateInstanceError::None:
                if (aVehicle)
                    as += aVehicle;
                break;
            case CreateInstanceError::InvalidData:
                std::cerr << "ERROR: Invalid data in record" << std::endl;
                break;
            case CreateInstanceError::UnknownType:
                std::cerr << "ERROR: Unknown type of vehicle" << std::endl;
                break;
        }
    }
}
In this alternative solution, createInstance() returns an error code, and loadData() checks the error codes 
and handles each case accordingly by printing the appropriate error messages.

3)Object Ownership and Polymorphism: Storing pointers (sdds::Vehicle*) allows for polymorphic behavior and better management of object ownership. When 
storing objects directly (sdds::Vehicle), the collection would hold actual objects, and object slicing could occur. Object slicing happens when derived 
class objects are stored in a container of the base class type, resulting in the loss of derived class-specific information. By storing pointers, you can 
avoid object slicing and maintain the ability to handle derived classes(Car or Racecar) through a common interface(Vehicle).
Dynamic Polymorphism and Virtual Functions: Using pointers (sdds::Vehicle*) enables dynamic polymorphism and the ability to invoke virtual functions. If the
base class Vehicle has virtual functions, storing pointers allows you to call the appropriate derived class implementation based on the actual object type 
being pointed to. This behavior would not be possible if storing objects directly (sdds::Vehicle).
using std::list<sdds::Vehicle*> and std::vector<sdds::Vehicle*> allows for polymorphic behavior, dynamic polymorphism through virtual functions, better 
object ownership management, more flexibility in memory allocation, and potentially better memory efficiency. These factors make storing pointers to Vehicle
objects more appropriate in scenarios where polymorphism and object management are important considerations as comapred to std::list<sdds::Vehicle> and 
std::vector<sdds::Vehicle>












