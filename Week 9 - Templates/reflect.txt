/*
* Name - Avni Goyal
* Seneca Email - agoyal31@myseneca.ca
* Seneca Student ID - 166795211
* Date of completion - 2023/06/04
*/
//I have done all the coding by myself and only copied the code that my professor provided to complete my workshops and assignments.

REFLECTION:

This workshop was very knowledgeable, as it cleared all the concepts related to templates. Templates are peice of pre-defined code that can work with distinct 
data types. While, specialized templates only work for specific data types. Moving furthur, only '.h' file is created because it is not compiled to byte code 
during execution (templates are not compiled). Moreover, '.h' files are created separately becasue it contains function names of class, struct, enum or simple 
functions but templates are not functions. It is just a dummy that can be used to generate a code for specified data type. Furthermore, in the given module, 
'dictionary.h' one extra member function and one helper

                    		bool operator==(const Dictionary& dict)const;
                                std::ostream& operator<<(std::ostream& out, const Dictionary& dictionary);

is created(overloaded). The need for both of them arises becuase of the objects of class 'Dictionary'. Since, the object of dictionary class needs to be 
copied/added into array of type 'dictionary'(basically array of objects) in header file 'Queue.h' so that array of dictionary could be displayed. Therefore, 
to display the array of objects on console the extraction operator is overloaded because extraction only works for pirimitive data types.(Class objects are not pirimitive) Hence, display() can console the dictionary(that has terms and definition strings) on screen. Moving, onto next one 
in the module "UniqueQueue.h" the elements already residing in an array need not be pushed into an existing array by the function named 'push()'
                           	bool UniqueQueue <double>::push(const double& item) 
Since, the function compares the array of dictionary when given from main file with the object of dictionary that will be added. That means, objects are being compared which could not be possible as they are compound data types. Hence relational operator '==' is overloaded in dictionary.h.

Class variables(static) are declared outside of class because they do not belong to objects of class and belongs to class itself. Hence, 
                                  		static T objectNotInQueue; //dummy object(to be specialized)
is created as it does not belong to any of object of class and can be returned empty whenever required.

The reason for specialising the push member function is because it can only accept(push) those items of doubles only once that has the difference of '0.005'
	template<>
	bool UniqueQueue <double>::push(const double& item) 
which become possible with the help of functions 'abs()'. Well, this workshop on templates clear everything related to template inheritence, as UniqueQueue template is derived from Queue template. Overriding functions, in case 'push()' function virtual is used so that everytime functions  
latest version is called. Example: 
         		virtual bool push(const T& item).
It is also an example of inclusion polymorphism because it have same function signature in both the derived(uniqueQueue) and the base class(Queue).

                                             

 


